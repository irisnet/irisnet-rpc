// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"context"
	"flag"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
	"model"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  TxGasResponse GetTxGas(TxGasRequest req)")
	fmt.Fprintln(os.Stderr, "  SequenceResponse GetSequence(SequenceRequest req)")
	fmt.Fprintln(os.Stderr, "  BuildTxResponse BuildTx(BuildTxRequest req)")
	fmt.Fprintln(os.Stderr, "  PostTxResponse PostTx(PostTxRequest req)")
	fmt.Fprintln(os.Stderr, "  SimulateTxResponse SimulateTx(SimulateTxRequest req)")
	fmt.Fprintln(os.Stderr, "  BalanceResponse GetBalance(BalanceRequest req)")
	fmt.Fprintln(os.Stderr, "   GetTxList(TxListRequest req)")
	fmt.Fprintln(os.Stderr, "  Tx GetTxDetail(TxDetailRequest req)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl *url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		var err error
		parsedUrl, err = url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	iprot := protocolFactory.GetProtocol(trans)
	oprot := protocolFactory.GetProtocol(trans)
	client := model.NewBlockChainServiceClient(thrift.NewTStandardClient(iprot, oprot))
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "GetTxGas":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTxGas requires 1 args")
			flag.Usage()
		}
		arg19 := flag.Arg(1)
		mbTrans20 := thrift.NewTMemoryBufferLen(len(arg19))
		defer mbTrans20.Close()
		_, err21 := mbTrans20.WriteString(arg19)
		if err21 != nil {
			Usage()
			return
		}
		factory22 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt23 := factory22.GetProtocol(mbTrans20)
		argvalue0 := model.NewTxGasRequest()
		err24 := argvalue0.Read(jsProt23)
		if err24 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetTxGas(context.Background(), value0))
		fmt.Print("\n")
		break
	case "GetSequence":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetSequence requires 1 args")
			flag.Usage()
		}
		arg25 := flag.Arg(1)
		mbTrans26 := thrift.NewTMemoryBufferLen(len(arg25))
		defer mbTrans26.Close()
		_, err27 := mbTrans26.WriteString(arg25)
		if err27 != nil {
			Usage()
			return
		}
		factory28 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt29 := factory28.GetProtocol(mbTrans26)
		argvalue0 := model.NewSequenceRequest()
		err30 := argvalue0.Read(jsProt29)
		if err30 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetSequence(context.Background(), value0))
		fmt.Print("\n")
		break
	case "BuildTx":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "BuildTx requires 1 args")
			flag.Usage()
		}
		arg31 := flag.Arg(1)
		mbTrans32 := thrift.NewTMemoryBufferLen(len(arg31))
		defer mbTrans32.Close()
		_, err33 := mbTrans32.WriteString(arg31)
		if err33 != nil {
			Usage()
			return
		}
		factory34 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt35 := factory34.GetProtocol(mbTrans32)
		argvalue0 := model.NewBuildTxRequest()
		err36 := argvalue0.Read(jsProt35)
		if err36 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.BuildTx(context.Background(), value0))
		fmt.Print("\n")
		break
	case "PostTx":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "PostTx requires 1 args")
			flag.Usage()
		}
		arg37 := flag.Arg(1)
		mbTrans38 := thrift.NewTMemoryBufferLen(len(arg37))
		defer mbTrans38.Close()
		_, err39 := mbTrans38.WriteString(arg37)
		if err39 != nil {
			Usage()
			return
		}
		factory40 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt41 := factory40.GetProtocol(mbTrans38)
		argvalue0 := model.NewPostTxRequest()
		err42 := argvalue0.Read(jsProt41)
		if err42 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.PostTx(context.Background(), value0))
		fmt.Print("\n")
		break
	case "SimulateTx":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "SimulateTx requires 1 args")
			flag.Usage()
		}
		arg43 := flag.Arg(1)
		mbTrans44 := thrift.NewTMemoryBufferLen(len(arg43))
		defer mbTrans44.Close()
		_, err45 := mbTrans44.WriteString(arg43)
		if err45 != nil {
			Usage()
			return
		}
		factory46 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt47 := factory46.GetProtocol(mbTrans44)
		argvalue0 := model.NewSimulateTxRequest()
		err48 := argvalue0.Read(jsProt47)
		if err48 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.SimulateTx(context.Background(), value0))
		fmt.Print("\n")
		break
	case "GetBalance":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetBalance requires 1 args")
			flag.Usage()
		}
		arg49 := flag.Arg(1)
		mbTrans50 := thrift.NewTMemoryBufferLen(len(arg49))
		defer mbTrans50.Close()
		_, err51 := mbTrans50.WriteString(arg49)
		if err51 != nil {
			Usage()
			return
		}
		factory52 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt53 := factory52.GetProtocol(mbTrans50)
		argvalue0 := model.NewBalanceRequest()
		err54 := argvalue0.Read(jsProt53)
		if err54 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetBalance(context.Background(), value0))
		fmt.Print("\n")
		break
	case "GetTxList":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTxList requires 1 args")
			flag.Usage()
		}
		arg55 := flag.Arg(1)
		mbTrans56 := thrift.NewTMemoryBufferLen(len(arg55))
		defer mbTrans56.Close()
		_, err57 := mbTrans56.WriteString(arg55)
		if err57 != nil {
			Usage()
			return
		}
		factory58 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt59 := factory58.GetProtocol(mbTrans56)
		argvalue0 := model.NewTxListRequest()
		err60 := argvalue0.Read(jsProt59)
		if err60 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetTxList(context.Background(), value0))
		fmt.Print("\n")
		break
	case "GetTxDetail":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTxDetail requires 1 args")
			flag.Usage()
		}
		arg61 := flag.Arg(1)
		mbTrans62 := thrift.NewTMemoryBufferLen(len(arg61))
		defer mbTrans62.Close()
		_, err63 := mbTrans62.WriteString(arg61)
		if err63 != nil {
			Usage()
			return
		}
		factory64 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt65 := factory64.GetProtocol(mbTrans62)
		argvalue0 := model.NewTxDetailRequest()
		err66 := argvalue0.Read(jsProt65)
		if err66 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetTxDetail(context.Background(), value0))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
